//**************************************
// Levi Sutton
// Lab 12
//**************************************

template <typename T>
priority_queue<T>::priority_queue() : h(){

}

template <typename T>
void priority_queue<T>::pop(){

	assert(!empty());
	h.remove();
}

template <typename T>
void priority_queue<T>::push(const T& item){

      if (h.CAPACITY == h.size()){
            cout << "Queue has reached max capacity!" << endl;
            return;
      }
      h.insert(item);
}

template <typename T>
bool priority_queue<T>::empty() const{

    return h.is_empty();
}

template <typename T>
unsigned int priority_queue<T>::size() const{

    return h.size();

}

template <typename T>
T priority_queue<T>::top() const{

    return h.max();
}